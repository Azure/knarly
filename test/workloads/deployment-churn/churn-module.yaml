# Cluster loader 2 module, for one phase of "churn"
# In a phase of churn, we shut down all the pods with one name pattern, and concurrently start up another with a new name patter
#
# We have to do it in phases like this because deletion in CL2 is name-based, and so we need the things we are deleting right now
# to have a different 'base name' from the things we are creating.

{{$previousRoundNum := SubtractInt .roundNumber 1}}
{{$fullRoundName := print $.desc " (rnd " $.roundNumber ")"}}

steps:
- name: begin CRUD timer 
  measurements:
  - Identifier: Timer # (reference to timer named "Timer" in containing file)
    Method: Timer
    Params:
      action: start
      label: CRUD for {{$fullRoundName}}

- name: {{$fullRoundName}}
  phases:  # phases run concurrently if they are within the same step
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: {{$.oldReplicasAfterDeletion}}
    tuningSet: TargetDeleteQps  # (reference to tuning set from containing file)
    objectBundle:
    - basename: deployment-rnd-{{$previousRoundNum}}-instance  # delete the previous set
      objectTemplatePath: "deployment.yaml"
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: {{$.newReplicas}} 
    tuningSet: TargetCreateQps # (reference to tuning set from containing file)
    objectBundle:
    - basename: deployment-rnd-{{$.roundNumber}}-instance  # create the new set
      objectTemplatePath: "deployment.yaml"
      templateFillMap:
        testRound: r{{$.roundNumber}}
        replicas: {{$.podsPerDeployment}}

- name: end CRUD timer
  measurements:
  - Identifier: Timer # (ref to object in containing file)        
    Method: Timer
    Params:
      action: stop
      label: CRUD for {{$fullRoundName}}
- name: begin wait timer
  measurements:
  - Identifier: Timer
    Method: Timer
    Params:
      action: start
      label: wait for pods {{$fullRoundName}}

- name: Wait for all pods from round {{$.roundNumber}} to start running # otherwise we'll just delete them in the next round before they have even started running, but we'd rather exercise the full pod lifecycle
  measurements:
  - Identifier: WaitForRunningPods  # unlike WaitForControlledPods, this does not seem to require separate setup and gather phases
    Method: WaitForRunningPods
    Params:
      desiredPodCount: {{$.totalPods}} 
      labelSelector: test-round in (r1, r{{$.roundNumber}})  # since we may carry some over from round 1
      timeout: {{$.timeout}}

- name: end wait timer
  measurements:
  - Identifier: Timer
    Method: Timer
    Params:
      action: stop
      label: wait for pods {{$fullRoundName}}
